import { Controller, Get, Post, Put, Delete, Body, Param, Query, Res, UseInterceptors, UploadedFile } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiParam, ApiBody, ApiConsumes } from '@nestjs/swagger';
import { Response } from 'express';
import { Create{{name}}UseCase } from '../usecases/create-{{entity}}.usecase';
import { Get{{name}}UseCase } from '../usecases/get-{{entity}}.usecase';
import { Update{{name}}UseCase } from '../usecases/update-{{entity}}.usecase';
import { Delete{{name}}UseCase } from '../usecases/delete-{{entity}}.usecase';
{{#if fields}}{{#each fields}}{{#if (eq type "file")}}import { Upload{{name}}UseCase } from '../usecases/upload-{{entity}}.usecase';
import { FileInterceptor } from '@nestjs/platform-express';
{{/if}}{{/each}}{{/if}}
import { Create{{name}}Dto } from '../dto/create-{{entity}}.dto';
import { Update{{name}}Dto } from '../dto/update-{{entity}}.dto';

@ApiTags('{{entityNames}}')
@Controller({ version: '1', path: '{{entityNames}}' })
export class {{name}}Controller {
  constructor(
    private readonly create{{name}}UseCase: Create{{name}}UseCase,
    private readonly get{{name}}UseCase: Get{{name}}UseCase,
    private readonly update{{name}}UseCase: Update{{name}}UseCase,
    private readonly delete{{name}}UseCase: Delete{{name}}UseCase,
    {{#if fields}}{{#each fields}}{{#if (eq type "file")}}
    private readonly upload{{name}}UseCase: Upload{{name}}UseCase,
    {{/if}}{{/each}}{{/if}}
  ) {}

  @Post()
  @ApiOperation({ summary: 'Create a new {{name}}' })
  @ApiBody({ type: Create{{name}}Dto })
  @ApiResponse({ status: 400, description: 'Bad Request' })
  async create(@Body() create{{name}}Dto: Create{{name}}Dto, @Res() res: Response) {
    try {
      const data = await this.create{{name}}UseCase.execute(create{{name}}Dto, res.locals.logged);
      return res.status(201).json({
        status: true,
        message: '{{name}} created successfully',
        data,
      });
    } catch (error) {
      return res.status(400).json({
        status: false,
        message: error.message,
      });
    }
  }

  @Get()
  @ApiOperation({ summary: 'Get all {{name}}s' })
  @ApiResponse({ status: 400, description: 'Bad Request' })
  @ApiQuery({ name: 'page', required: false, type: Number, description: 'Page number for pagination', example: 1 }) 
  @ApiQuery({ name: 'limit', required: false, type: Number, description: 'Number of items per page', example: 10 })
  async findAll(
    @Res() res: Response, 
    @Query('page') page: number, 
    @Query('limit') limit: number
  ) {
    try {
      const data = await this.get{{name}}UseCase.paginate(page, limit, {}, [], res.locals.logged);
      return res.status(200).json({
        status: true,
        message: '{{name}}s retrieved successfully',
        data,
      });
    } catch (error) {
      return res.status(400).json({
        status: false,
        message: error.message,
      });
    }
  }

  @Get(':id')
  @ApiOperation({ summary: 'Get a {{name}} by ID' })
  @ApiParam({ name: 'id', type: String, description: 'ID of the {{name}}'{{#if (eq idType "uuid")}}, format: 'uuid'{{/if}}, example: '{{#if (eq idType "uuid")}}123e4567-e89b-12d3-a456-426614174000{{else}}1{{/if}}' })
  @ApiResponse({ status: 404, description: 'Not Found' })
  async findOne(@Param('id') id: string, @Res() res: Response) {
    try {
      const data = await this.get{{name}}UseCase.execute(id);
      if (!data) {
        return res.status(404).json({
          status: false,
          message: '{{name}} not found',
        });
      }
      return res.status(200).json({
        status: true,
        message: '{{name}} retrieved successfully',
        data,
      });
    } catch (error) {
      return res.status(400).json({
        status: false,
        message: error.message,
      });
    }
  }

  @Put(':id')
  @ApiOperation({ summary: 'Update a {{name}} by ID' })
  @ApiParam({ name: 'id', type: String, description: 'ID of the {{name}}'{{#if (eq idType "uuid")}}, format: 'uuid'{{/if}}, example: '{{#if (eq idType "uuid")}}123e4567-e89b-12d3-a456-426614174000{{else}}1{{/if}}' })
  @ApiBody({ type: Update{{name}}Dto })
  @ApiResponse({ status: 404, description: 'Not Found' })
  async update(@Param('id') id: string, @Body() update{{name}}Dto: Update{{name}}Dto, @Res() res: Response) {
    try {
      const data = await this.update{{name}}UseCase.execute(id, update{{name}}Dto, res.locals.logged);
      if (!data) {
        return res.status(404).json({
          status: false,
          message: '{{name}} not found',
        });
      }
      return res.status(200).json({
        status: true,
        message: '{{name}} updated successfully',
        data,
      });
    } catch (error) {
      return res.status(400).json({
        status: false,
        message: error.message,
      });
    }
  }

  @Delete(':id')
  @ApiOperation({ summary: 'Soft delete a {{name}} by ID' })
  @ApiParam({ name: 'id', type: String, description: 'ID of the {{name}}'{{#if (eq idType "uuid")}}, format: 'uuid'{{/if}}, example: '{{#if (eq idType "uuid")}}123e4567-e89b-12d3-a456-426614174000{{else}}1{{/if}}' })
  @ApiResponse({ status: 404, description: 'Not Found' })
  async remove(@Param('id') id: string, @Res() res: Response) {
    try {
      const data = await this.delete{{name}}UseCase.execute(id, res.locals.logged);
      if (!data) {
        return res.status(404).json({
          status: false,
          message: '{{name}} not found',
        });
      }
      return res.status(200).json({
        status: true,
        message: '{{name}} deleted successfully',
        data,
      });
    } catch (error) {
      return res.status(400).json({
        status: false,
        message: error.message,
      });
    }
  }

  {{#if fields}}{{#each fields}}{{#if (eq type "file")}}
  @Post(':id/upload')
  @ApiOperation({ summary: 'Upload a file for a {{name}}' })
  @ApiParam({ name: 'id', type: String, description: 'ID of the {{name}}'{{#if (eq idType "uuid")}}, format: 'uuid'{{/if}}, example: '{{#if (eq idType "uuid")}}123e4567-e89b-12d3-a456-426614174000{{else}}1{{/if}}' })
  @ApiConsumes('multipart/form-data')
  @ApiBody({
    schema: {
      type: 'object',
      properties: {
        file: { type: 'string', format: 'binary' },
      },
    },
  })
  @ApiResponse({ status: 400, description: 'Bad Request' })
  @ApiResponse({ status: 404, description: 'Not Found' })
  @UseInterceptors(FileInterceptor('file'))
  async upload(
    @Param('id') id: string,
    @UploadedFile() file: Express.Multer.File,
    @Res() res: Response,
  ) {
    try {
      if (!file) {
        return res.status(400).json({
          status: false,
          message: 'No file uploaded',
        });
      }
      const data = await this.upload{{name}}UseCase.execute(id, file, res.locals.logged);
      return res.status(200).json({
        status: true,
        message: 'File uploaded successfully',
        data,
      });
    } catch (error) {
      return res.status(400).json({
        status: false,
        message: error.message,
      });
    }
  }
  {{/if}}{{/each}}{{/if}}
}