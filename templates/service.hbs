import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { {{entityUpper}} } from '../entities/{{entityLower}}.entity';
import { Create{{entityUpper}}Dto, Update{{entityUpper}}Dto } from '../dtos/{{entityLower}}.dto';

{{#if hasDetails}}
import { {{detailEntityUpper}} } from '../entities/{{detailEntityLower}}.entity';
{{/if}}

@Injectable()
export class {{entityUpper}}UseCase {
    constructor(
    @InjectRepository({{entityUpper}})
        private {{entityLower}}Repository: Repository<{{entityUpper}}>
        {{#if hasDetails}}
        , private {{detailEntityLower}}Repository: Repository<{{detailEntityUpper}}>
        {{/if}}
    ) {}

    async create(createDto: Create{{entityUpper}}Dto): Promise<{{entityUpper}}> {
        try {
            {{#if hasDetails}}
            // detail
            if(createDto.{{detailEntityNames}}){
                let total = 0;
                const details = createDto.{{detailEntityNames}};
                if(details && details.length > 0){
                    for(let i = 0; i < details.length; i++){ 
                        const detail = details[i]; 
                        if (detail.qty !== undefined && detail.price !== undefined) {
                            const discount = detail?.discount ?? 0;
                            detail.total = (detail.qty * detail.price) - discount; 
                            if(detail?.total){ 
                                total += detail?.total ?? 0; 
                            } 
                        }
                    } 

                    createDto.total = total;
                } 
            }
            {{/if}}
            return await this.{{entityLower}}Repository.save(createDto);
        } catch (error) {
            throw new Error(`Failed to create {{entityLower}}: ${error.message}`);
        }
    }

    async findAll(query:any): Promise<any> {
        try {
            const {page, limit} = query;
            const skip = (page - 1) * limit;
            const [entities, total] = await this.{{entityLower}}Repository.findAndCount({
            {{#if hasDetails}}
            relations: ['{{detailEntityNames}}'],
            {{/if}}
            skip,
            take: limit
            });
            
            return {
                data: entities,
                meta: {
                    total,
                    page,
                    limit
                }
            };
        } catch (error) {
            throw new Error(`Failed to fetch {{entityNames}}: ${error.message}`);
        }
    }

    async findOne(id: string): Promise<{{entityUpper}}> {
        const entity = await this.{{entityLower}}Repository.findOne({
        where: { id }{{#if hasDetails}}, relations: ['{{detailEntityNames}}']{{/if}}
        });

        if (!entity) {
            throw new NotFoundException(`{{entityUpper}} with ID ${id} not found`);
        }

        return entity;
    }

    async update(id: string, updateDto: Update{{entityUpper}}Dto): Promise<{{entityUpper}}> {
        try {
            await this.{{entityLower}}Repository.update(id, updateDto);
            return await this.findOne(id);
        } catch (error) {
            throw new Error(`Failed to update {{entityLower}} ${id}: ${error.message}`);
        }
    }

    async remove(id: string): Promise<{ message: string; deletedEntity: {{entityUpper}} }> {
        try {
            await this.{{entityLower}}Repository.delete(id);
            return { message: `{{entityUpper}} ${id} deleted successfully`, deletedEntity: entity };
        } catch (error) {
            throw new Error(`Failed to delete {{entityLower}} ${id}: ${error.message}`);
        }
    }
}