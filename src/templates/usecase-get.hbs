import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { {{name}} } from '../../../entities/{{entity}}.entity';

interface LoggedUser { id: string; name: string }

@Injectable()
export class Get{{name}}UseCase {
  constructor(
    @InjectRepository({{name}})
    private {{nameLower}}Repository: Repository<{{name}}>,
  ) {}

  async execute(id: string, relations: string[] = [], logged?: LoggedUser): Promise<{{name}} | null> {
    try {
      if (!id) {
        throw new BadRequestException('ID is required');
      }

      const {{nameLower}} = await this.{{nameLower}}Repository.findOne({ 
        where: { id, deleted_at: null },
        relations,
      });

      if (!{{nameLower}}) {
        throw new NotFoundException(`{{name}} with ID ${id} not found or has been deleted`);
      }

      return {{nameLower}};
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw error;
      }
      throw new BadRequestException(`Failed to retrieve {{name}}: ${error.message}`);
    }
  }

  async paginate(
    page: number = 1,
    limit: number = 10,
    filters: any = {},
    relations: string[] = [],
    logged?: LoggedUser
  ): Promise<{ data: {{name}}[], total: number, page: number, total_page: number }> {
    try {
      if (page < 1 || limit < 1) {
        throw new BadRequestException('Page and limit must be positive numbers');
      }

      const where = { ...filters, deleted_at: null };
      const [data, total] = await this.{{nameLower}}Repository.findAndCount({
        where,
        relations,
        order: { 'created_at': 'DESC' },
        skip: (page - 1) * limit,
        take: limit,
      });

      const total_page = Math.ceil(total / limit);

      return {
        data,
        total,
        page,
        total_page,
      };
    } catch (error) {
      throw new BadRequestException(`Failed to retrieve {{name}}s: ${error.message}`);
    }
  }
}